"use client"

/**
 * @description
 * Client sub-component for the final step (Review) in the pitch wizard.
 * We have removed the "Generate Final Pitch" button. The pitch content is
 * now automatically generated after the user completes the last STAR sub-step.
 * This step simply provides a TipTap editor for the user to refine the pitch text.
 * No re-generation logic is available here.
 */

import React from "react"
import { useFormContext } from "react-hook-form"
import { PitchWizardFormData } from "./pitch-wizard"
import { useToast } from "@/lib/hooks/use-toast"
import { Bold, Italic, List, ListOrdered, Undo2, Redo2, Heading1 } from "lucide-react"

// TipTap & its extensions
import { EditorContent, useEditor } from "@tiptap/react"
import StarterKit from "@tiptap/starter-kit"
import BoldExtension from "@tiptap/extension-bold"
import ItalicExtension from "@tiptap/extension-italic"
import UnderlineExtension from "@tiptap/extension-underline"
import HeadingExtension from "@tiptap/extension-heading"
import BulletListExtension from "@tiptap/extension-bullet-list"
import OrderedListExtension from "@tiptap/extension-ordered-list"
import ListItemExtension from "@tiptap/extension-list-item"
import CharacterCountExtension from "@tiptap/extension-character-count"
import { Button } from "@/components/ui/button"

export default function ReviewStep() {
  const { watch, setValue } = useFormContext<PitchWizardFormData>()
  const { toast } = useToast()

  // The final pitch text is in pitchContent
  const pitchContent = watch("pitchContent") || ""

  // Initialize TipTap
  const editor = useEditor({
    extensions: [
      StarterKit,
      BoldExtension,
      ItalicExtension,
      UnderlineExtension,
      HeadingExtension.configure({ levels: [1, 2, 3] }),
      BulletListExtension,
      OrderedListExtension,
      ListItemExtension,
      CharacterCountExtension.configure({ limit: 10000 })
    ],
    content: pitchContent,
    autofocus: false,
    onUpdate: ({ editor }) => {
      const currentHTML = editor.getHTML()
      setValue("pitchContent", currentHTML, { shouldDirty: true })
    }
  })

  if (!editor) {
    return (
      <div className="flex flex-col items-center space-y-2 py-4">
        <svg
          className="h-6 w-6 animate-spin text-muted-foreground"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
        >
          <circle
            className="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            strokeWidth="4"
          />
          <path
            className="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8v8H4z"
          />
        </svg>
        <p className="text-sm text-muted-foreground">Loading editor...</p>
      </div>
    )
  }

  // Tiptap toolbar handlers
  const handleBold = () => editor.chain().focus().toggleBold().run()
  const handleItalic = () => editor.chain().focus().toggleItalic().run()
  const handleHeading = (level: 1 | 2 | 3) =>
    editor.chain().focus().toggleHeading({ level }).run()
  const handleBulletList = () => editor.chain().focus().toggleBulletList().run()
  const handleOrderedList = () => editor.chain().focus().toggleOrderedList().run()
  const handleUndo = () => editor.chain().focus().undo().run()
  const handleRedo = () => editor.chain().focus().redo().run()

  return (
    <div className="space-y-4">
      <p className="text-sm text-muted-foreground">
        Your pitch has been automatically generated by Albert based on your STAR examples.
        Feel free to refine the wording or formatting below before submitting.
      </p>

      {/* Info Box: no regeneration logic here */}
      <div className="p-3 bg-green-50 border border-green-200 rounded-md text-green-800 text-sm">
        <strong>âœ“ Automatic generation complete!</strong> Your pitch was created
        from your STAR examples. You can adjust any text below as needed.
      </div>

      {/* Toolbar */}
      <div className="flex flex-wrap items-center gap-2 rounded-md border bg-muted p-2">
        <Button
          type="button"
          size="sm"
          variant={editor.isActive("bold") ? "default" : "outline"}
          onClick={handleBold}
          aria-label="Toggle Bold"
          className="flex items-center gap-1"
        >
          <Bold className="h-4 w-4" />
        </Button>

        <Button
          type="button"
          size="sm"
          variant={editor.isActive("italic") ? "default" : "outline"}
          onClick={handleItalic}
          aria-label="Toggle Italic"
          className="flex items-center gap-1"
        >
          <Italic className="h-4 w-4" />
        </Button>

        <Button
          type="button"
          size="sm"
          variant="outline"
          onClick={() => handleHeading(1)}
          aria-label="Heading Level 1"
          className="flex items-center gap-1"
        >
          <Heading1 className="h-4 w-4" />
        </Button>

        <Button
          type="button"
          size="sm"
          variant={editor.isActive("bulletList") ? "default" : "outline"}
          onClick={handleBulletList}
          aria-label="Toggle Bullet List"
          className="flex items-center gap-1"
        >
          <List className="h-4 w-4" />
        </Button>

        <Button
          type="button"
          size="sm"
          variant={editor.isActive("orderedList") ? "default" : "outline"}
          onClick={handleOrderedList}
          aria-label="Toggle Ordered List"
          className="flex items-center gap-1"
        >
          <ListOrdered className="h-4 w-4" />
        </Button>

        <Button
          type="button"
          size="sm"
          variant="outline"
          onClick={handleUndo}
          aria-label="Undo"
          className="flex items-center gap-1"
        >
          <Undo2 className="h-4 w-4" />
        </Button>

        <Button
          type="button"
          size="sm"
          variant="outline"
          onClick={handleRedo}
          aria-label="Redo"
          className="flex items-center gap-1"
        >
          <Redo2 className="h-4 w-4" />
        </Button>

        {/* Character count display (optional) */}
        <div className="ml-auto text-xs text-muted-foreground">
          {editor.storage.characterCount
            ? `Characters: ${editor.storage.characterCount.characters() ?? 0}`
            : null}
        </div>
      </div>

      {/* Editor Area */}
      <div className="min-h-[300px] rounded-md border p-2">
        <EditorContent editor={editor} />
      </div>
    </div>
  )
}