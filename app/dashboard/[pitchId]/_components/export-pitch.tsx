"use client"

/**
 * @description
 * This client component provides PDF/Word export functionality for the pitch content.
 * It renders two buttons:
 * 1) "Export as PDF" - generates a PDF via html2pdf.js
 * 2) "Export as Word" - generates a .docx file using the 'docx' library
 *
 * Key Features:
 * - Uses a hidden <div> to render the pitch content for PDF generation (captured by html2pdf).
 * - For Word export, constructs a simple docx Document using the pitch content.
 *
 * @dependencies
 * - html2pdf.js (npm install html2pdf.js)
 * - docx (npm install docx)
 * - file-saver (npm install file-saver)
 *
 * @notes
 * - The user must install the above libraries.
 * - We store "pitchContent" in a <div> referenced by a React ref for PDF export.
 * - For docx generation, we use docx's Paragraph, TextRun, and Packer classes.
 */

import { useRef } from "react"
import { Button } from "@/components/ui/button"
import { useToast } from "@/lib/hooks/use-toast"
import html2pdf from "html2pdf.js"
import { saveAs } from "file-saver"
// Import docx classes to build Word files
import { Document, Packer, Paragraph, TextRun } from "docx"

interface ExportPitchProps {
  /**
   * The final pitch text to be exported.
   */
  pitchContent: string

  /**
   * An optional title for the pitch (used in doc filename).
   */
  pitchTitle?: string

  /**
   * The unique pitch ID for naming the file or other references.
   */
  pitchId: string
}

/**
 * ExportPitch
 * Provides two buttons to export pitch content as PDF or Word docx.
 * 
 * - Export as PDF: uses html2pdf.js to capture an off-screen <div> and convert to PDF
 * - Export as Word: uses docx library to generate a .docx file, then file-saver to download
 */
export default function ExportPitch({
  pitchContent,
  pitchTitle = "APS Pitch",
  pitchId
}: ExportPitchProps) {
  const { toast } = useToast()
  // We'll render the pitch content in a hidden div for PDF capture
  const pdfRef = useRef<HTMLDivElement>(null)

  /**
   * handleExportPDF
   * Renders the pitchContent inside a hidden <div> (pdfRef),
   * then calls html2pdf to generate a PDF file in the user's browser.
   */
  const handleExportPDF = async () => {
    if (!pdfRef.current) return

    try {
      // html2pdf config: pass the element, then specify file name etc.
      const opt = {
        margin: 0.5,
        filename: `${pitchTitle.replace(/\s+/g, "_") || "APS_Pitch"}_${pitchId}.pdf`,
        image: { type: "jpeg", quality: 0.98 },
        html2canvas: {},
        jsPDF: { unit: "in", format: "letter", orientation: "portrait" }
      }
      await html2pdf().from(pdfRef.current).set(opt).save()
      toast({
        title: "PDF Exported",
        description: "Your pitch has been exported as a PDF."
      })
    } catch (error: any) {
      toast({
        title: "Export Error",
        description: error.message || "Failed to export PDF.",
        variant: "destructive"
      })
    }
  }

  /**
   * handleExportWord
   * Builds a docx Document using docx library, then uses file-saver to trigger download.
   */
  const handleExportWord = async () => {
    try {
      // Break the pitchContent into lines or paragraphs
      const paragraphs = pitchContent
        .split("\n")
        .map(p => p.trim())
        .filter(line => line.length > 0)
        .map(line => {
          return new Paragraph({
            children: [
              new TextRun({
                text: line,
                font: "Arial",
                size: 24 // docx font size is in half-points (24 = 12pt)
              })
            ]
          })
        })

      // Build a docx Document
      const doc = new Document({
        creator: "AI-Powered APS Pitch Builder",
        title: pitchTitle,
        description: "APS Pitch generated by AI",
        sections: [
          {
            children: paragraphs.length
              ? paragraphs
              : [
                  new Paragraph({
                    children: [
                      new TextRun({
                        text: pitchContent || "No content.",
                        size: 24
                      })
                    ]
                  })
                ]
          }
        ]
      })

      // Convert doc to a blob
      const blob = await Packer.toBlob(doc)
      // Create file name
      const fileName = `${pitchTitle.replace(/\s+/g, "_") || "APS_Pitch"}_${pitchId}.docx`
      // Save using FileSaver
      saveAs(blob, fileName)
      toast({
        title: "Word Exported",
        description: "Your pitch has been exported as a DOCX."
      })
    } catch (error: any) {
      toast({
        title: "Export Error",
        description: error.message || "Failed to export Word doc.",
        variant: "destructive"
      })
    }
  }

  return (
    <div className="mt-6 space-y-2">
      <h2 className="text-md font-semibold">Export Options</h2>
      <div className="flex gap-2">
        <Button variant="outline" onClick={handleExportPDF}>
          Export as PDF
        </Button>
        <Button variant="outline" onClick={handleExportWord}>
          Export as Word
        </Button>
      </div>

      {/* Hidden container for PDF generation */}
      <div ref={pdfRef} style={{ display: "none" }}>
        <h1 style={{ fontSize: "20px", fontWeight: "bold", marginBottom: "10px" }}>
          {pitchTitle}
        </h1>
        <div style={{ whiteSpace: "pre-wrap", fontSize: "14px" }}>
          {pitchContent}
        </div>
      </div>
    </div>
  )
}