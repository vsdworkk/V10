// app/(wizard)/dashboard/new/components/steps/guidance-step.tsx
"use client"

import { useFormContext } from "react-hook-form"
import { useState, useEffect, useRef } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { RefreshCw } from "lucide-react"
import { useAiGuidance } from "@/lib/hooks/use-ai-guidance"
import { debugLog } from "@/lib/debug"
import { PitchWizardFormData } from "../wizard/schema"
import { useParams } from "next/navigation"

interface GuidanceStepProps {
  pitchId?: string // Accept pitchId as an optional prop
}

export default function GuidanceStep({
  pitchId: pitchIdFromProp,
}: GuidanceStepProps) {
  const { watch, setValue, getValues, formState } =
    useFormContext<PitchWizardFormData>()
  const { errors } = formState
  const params = useParams()

  const userId = watch("userId")
  const roleName = watch("roleName")
  const roleLevel = watch("roleLevel")
  const relevantExperience = watch("relevantExperience")
  const roleDescription = watch("roleDescription")
  const albertGuidance = watch("albertGuidance") // existing guidance
  const starExamplesCount = watch("starExamplesCount")
  const pitchWordLimit = watch("pitchWordLimit")

  const definitivePitchId = pitchIdFromProp || (params?.pitchId as string)

  const { isLoading, guidance, error, requestId, fetchGuidance } = useAiGuidance()

  const hasRequestedRef = useRef(false)

  // Initial fetch of guidance if conditions are met (guarded to one fire)
  useEffect(() => {
    debugLog(
      "[GuidanceStep] Initial guidance check - albertGuidance:",
      albertGuidance ? "present" : "not present",
      "definitivePitchId:",
      definitivePitchId
    )

    if (
      !albertGuidance &&
      roleDescription &&
      relevantExperience &&
      userId &&
      definitivePitchId &&
      !hasRequestedRef.current
    ) {
      debugLog(
        "[GuidanceStep] Conditions met for initial guidance request, calling fetchGuidance"
      )
      hasRequestedRef.current = true
      fetchGuidance(roleDescription, relevantExperience, userId, definitivePitchId)
    } else if (albertGuidance) {
      debugLog(
        "[GuidanceStep] Not fetching guidance as it already exists in form state"
      )
    }
  }, [
    albertGuidance,
    roleDescription,
    relevantExperience,
    userId,
    definitivePitchId,
    fetchGuidance,
  ])

  // Update form when guidance is received, only if different from current value
  useEffect(() => {
    const currentGuidance = getValues("albertGuidance")
    if (guidance && guidance !== currentGuidance) {
      debugLog("[GuidanceStep] Updating form with new guidance", guidance)
      setValue("albertGuidance", guidance, { shouldDirty: true })
      if (requestId) {
        setValue("agentExecutionId", requestId, { shouldDirty: true })
      }
    }
  }, [guidance, requestId, setValue, getValues])

  // Manual retry handler
  const handleRefetchGuidance = () => {
    if (roleDescription && relevantExperience && userId && definitivePitchId) {
      // Reset the request flag to allow a controlled retry later if needed
      hasRequestedRef.current = false
      fetchGuidance(roleDescription, relevantExperience, userId, definitivePitchId)
    }
  }

  const possibleStarCounts = ["2", "3", "4"]
  const starCount = starExamplesCount || "2"
  const recommendedCount = pitchWordLimit < 550 ? "2" : pitchWordLimit <= 700 ? "3" : "4"

  debugLog("[GuidanceStep] Rendering with albertGuidance (from form watch):", albertGuidance)

  return (
    <div className="p-1 sm:p-6">
      <div className="flex h-[500px] flex-col gap-6 overflow-y-auto pr-2">
        {!isLoading && !error && albertGuidance && (
          <div>
            <h3 className="mb-4 text-xl font-semibold text-gray-900">AI Suggestions</h3>

            <div
              className="mb-4 rounded-xl border p-4"
              style={{ backgroundColor: "#eef2ff", borderColor: "#c7d2fe" }}
            >
              <p className="text-sm" style={{ color: "#444ec1" }}>
                <strong>Note:</strong> The suggestions below were generated by AI analyzing
                your experience and job description to spark ideas and help you recall
                impactful moments. These examples won't carry forward automatically—you
                choose what to use in upcoming sections. If you have experiences that
                better highlight your capabilities, you're encouraged to draw on those
                instead.
              </p>
            </div>
          </div>
        )}

        {isLoading && (
          <div className="flex flex-col items-center space-y-2 py-4">
            <RefreshCw className="size-8 animate-spin" style={{ color: "#444ec1" }} />
            <p>Generating AI Guidance...</p>
          </div>
        )}

        {error && !isLoading && (
          <div
            className="rounded-xl border p-5 text-center"
            role="alert"
            aria-live="polite"
            style={{ backgroundColor: "#eef2ff", borderColor: "#c7d2fe" }}
          >
            <div className="mb-2 text-base font-semibold" style={{ color: "#444ec1" }}>
              Oops! We ran into a hiccup
            </div>
            <p className="mb-4 text-sm" style={{ color: "#444ec1" }}>
              It looks like something went wrong while trying to generate your suggestions.
              This can happen if the service is busy or your internet connection briefly
              dropped.
            </p>
            <div className="flex justify-center">
              <button
                onClick={handleRefetchGuidance}
                className="inline-flex items-center gap-2 rounded-md px-5 py-2.5 text-sm font-medium text-white shadow-sm transition hover:brightness-110"
                style={{ backgroundColor: "#444ec1" }}
              >
                <RefreshCw className="size-4" />
                Retry
              </button>
            </div>
          </div>
        )}

        {!isLoading && !error && albertGuidance && (
          <Card className="rounded-xl border border-gray-200 bg-gray-50">
            <CardContent className="pt-6">
              <div className="whitespace-pre-wrap text-sm">{albertGuidance}</div>
            </CardContent>
          </Card>
        )}

        {/* STAR examples count chooser */}
        <div className="space-y-4">
          <p className="font-medium text-gray-700">How many STAR examples do you want to include?</p>
          <div className="grid grid-cols-3 gap-4">
            {possibleStarCounts.map((val) => (
              <div key={val} className="flex flex-col items-center gap-1">
                <button
                  onClick={() =>
                    setValue("starExamplesCount", val as any, { shouldDirty: true })
                  }
                  className={`flex h-16 w-full flex-col items-center justify-center rounded-xl transition-all duration-200 ${
                    starCount === val
                      ? "font-medium"
                      : "bg-gray-50 text-gray-700 hover:bg-gray-100"
                  }`}
                  style={
                    starCount === val
                      ? { backgroundColor: "#eef2ff", color: "#444ec1" }
                      : {}
                  }
                >
                  <span className="text-lg font-semibold">{val}</span>
                  {recommendedCount === val && (
                    <span className="flex items-center gap-1 text-xs font-medium" style={{ color: "#444ec1" }}>
                      <span>✨ </span>
                      Recommended by Recruiters
                    </span>
                  )}
                </button>
              </div>
            ))}
          </div>

          {errors.starExamplesCount && (
            <p className="text-sm text-red-500">
              {errors.starExamplesCount.message as string}
            </p>
          )}
        </div>
      </div>
    </div>
  )
}
